name: Build Pipeline

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: murdermystery
          POSTGRES_USER: game
          POSTGRES_PASSWORD: pgpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        cat << EOF > ./api/.env
        DB_CONN_URL=postgresql://game:pgpassword@localhost:5432/murdermystery
        INFERENCE_SERVICE=anthropic
        MODEL=claude-3-haiku-20240307
        API_KEY=${{ secrets.API_KEY || 'dummy-api-key' }}
        MAX_TOKENS=512
        EOF

    - name: Build and run backend
      run: |
        docker build -t backend ./api
        docker run -d --name backend -p 10000:10000 \
          --env-file ./api/.env \
          backend
        docker exec backend bash api_start.sh

    - name: Build and run frontend
      env:
        REACT_APP_API_URL: http://localhost:10000
      run: |
        docker build -t frontend ./web
        docker run -d --name frontend -p 3000:3000 \
          -e REACT_APP_API_URL \
          frontend
        docker exec frontend bash web_start.sh

    - name: Wait for services to start
      run: |
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:10000)" != "200" ]]; do sleep 5; done'
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done'

    # - name: Run tests
    #   run: |
    #     # docker exec backend npm test
    #     # docker exec frontend npm test

    - name: Clean up
      if: always()
      run: |
        docker stop backend frontend
        docker rm backend frontend